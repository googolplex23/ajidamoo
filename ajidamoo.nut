///bin/cat /dev/null; sq ajidamoo.nut
///bin/cat /dev/null; exit 0


//ajidamoo, by Leo F.


//Precalculated move generation tables. these are generated by LUT_generator.py

//maybe move these to the root table when porting to VScript?

local movegenlookup = [[[[8, 16, 24, 32, 40, 48, 56], [], [1, 2, 3, 4, 5, 6, 7], []], [[], [], [], [9, 18, 27, 36, 45, 54, 63]], [[10], [17]]], [[[9, 17, 25, 33, 41, 49, 57], [], [2, 3, 4, 5, 6, 7], [0]], [[], [], [8], [10, 19, 28, 37, 46, 55]], [[16], [11], [18]]], [[[10, 18, 26, 34, 42, 50, 58], [], [3, 4, 5, 6, 7], [1, 0]], [[], [], [9, 16], [11, 20, 29, 38, 47]], [[8], [17], [12], [19]]], [[[11, 19, 27, 35, 43, 51, 59], [], [4, 5, 6, 7], [2, 1, 0]], [[], [], [10, 17, 24], [12, 21, 30, 39]], [[9], [18], [13], [20]]], [[[12, 20, 28, 36, 44, 52, 60], [], [5, 6, 7], [3, 2, 1, 0]], [[], [], [11, 18, 25, 32], [13, 22, 31]], [[10], [19], [14], [21]]], [[[13, 21, 29, 37, 45, 53, 61], [], [6, 7], [4, 3, 2, 1, 0]], [[], [], [12, 19, 26, 33, 40], [14, 23]], [[11], [20], [15], [22]]], [[[14, 22, 30, 38, 46, 54, 62], [], [7], [5, 4, 3, 2, 1, 0]], [[], [], [13, 20, 27, 34, 41, 48], [15]], [[12], [21], [23]]], [[[15, 23, 31, 39, 47, 55, 63], [], [], [6, 5, 4, 3, 2, 1, 0]], [[], [], [14, 21, 28, 35, 42, 49, 56], []], [[13], [22]]], [[[16, 24, 32, 40, 48, 56], [0], [9, 10, 11, 12, 13, 14, 15], []], [[1], [], [], [17, 26, 35, 44, 53, 62]], [[2], [18], [25]]], [[[17, 25, 33, 41, 49, 57], [1], [10, 11, 12, 13, 14, 15], [8]], [[2], [0], [16], [18, 27, 36, 45, 54, 63]], [[3], [24], [19], [26]]], [[[18, 26, 34, 42, 50, 58], [2], [11, 12, 13, 14, 15], [9, 8]], [[3], [1], [17, 24], [19, 28, 37, 46, 55]], [[4], [0], [16], [25], [20], [27]]], [[[19, 27, 35, 43, 51, 59], [3], [12, 13, 14, 15], [10, 9, 8]], [[4], [2], [18, 25, 32], [20, 29, 38, 47]], [[5], [1], [17], [26], [21], [28]]], [[[20, 28, 36, 44, 52, 60], [4], [13, 14, 15], [11, 10, 9, 8]], [[5], [3], [19, 26, 33, 40], [21, 30, 39]], [[6], [2], [18], [27], [22], [29]]], [[[21, 29, 37, 45, 53, 61], [5], [14, 15], [12, 11, 10, 9, 8]], [[6], [4], [20, 27, 34, 41, 48], [22, 31]], [[7], [3], [19], [28], [23], [30]]], [[[22, 30, 38, 46, 54, 62], [6], [15], [13, 12, 11, 10, 9, 8]], [[7], [5], [21, 28, 35, 42, 49, 56], [23]], [[4], [20], [29], [31]]], [[[23, 31, 39, 47, 55, 63], [7], [], [14, 13, 12, 11, 10, 9, 8]], [[], [6], [22, 29, 36, 43, 50, 57], []], [[5], [21], [30]]], [[[24, 32, 40, 48, 56], [8, 0], [17, 18, 19, 20, 21, 22, 23], []], [[9, 2], [], [], [25, 34, 43, 52, 61]], [[10], [1], [26], [33]]], [[[25, 33, 41, 49, 57], [9, 1], [18, 19, 20, 21, 22, 23], [16]], [[10, 3], [8], [24], [26, 35, 44, 53, 62]], [[11], [2], [0], [32], [27], [34]]], [[[26, 34, 42, 50, 58], [10, 2], [19, 20, 21, 22, 23], [17, 16]], [[11, 4], [9, 0], [25, 32], [27, 36, 45, 54, 63]], [[12], [3], [8], [1], [24], [33], [28], [35]]], [[[27, 35, 43, 51, 59], [11, 3], [20, 21, 22, 23], [18, 17, 16]], [[12, 5], [10, 1], [26, 33, 40], [28, 37, 46, 55]], [[13], [4], [9], [2], [25], [34], [29], [36]]], [[[28, 36, 44, 52, 60], [12, 4], [21, 22, 23], [19, 18, 17, 16]], [[13, 6], [11, 2], [27, 34, 41, 48], [29, 38, 47]], [[14], [5], [10], [3], [26], [35], [30], [37]]], [[[29, 37, 45, 53, 61], [13, 5], [22, 23], [20, 19, 18, 17, 16]], [[14, 7], [12, 3], [28, 35, 42, 49, 56], [30, 39]], [[15], [6], [11], [4], [27], [36], [31], [38]]], [[[30, 38, 46, 54, 62], [14, 6], [23], [21, 20, 19, 18, 17, 16]], [[15], [13, 4], [29, 36, 43, 50, 57], [31]], [[7], [12], [5], [28], [37], [39]]], [[[31, 39, 47, 55, 63], [15, 7], [], [22, 21, 20, 19, 18, 17, 16]], [[], [14, 5], [30, 37, 44, 51, 58], []], [[13], [6], [29], [38]]], [[[32, 40, 48, 56], [16, 8, 0], [25, 26, 27, 28, 29, 30, 31], []], [[17, 10, 3], [], [], [33, 42, 51, 60]], [[18], [9], [34], [41]]], [[[33, 41, 49, 57], [17, 9, 1], [26, 27, 28, 29, 30, 31], [24]], [[18, 11, 4], [16], [32], [34, 43, 52, 61]], [[19], [10], [8], [40], [35], [42]]], [[[34, 42, 50, 58], [18, 10, 2], [27, 28, 29, 30, 31], [25, 24]], [[19, 12, 5], [17, 8], [33, 40], [35, 44, 53, 62]], [[20], [11], [16], [9], [32], [41], [36], [43]]], [[[35, 43, 51, 59], [19, 11, 3], [28, 29, 30, 31], [26, 25, 24]], [[20, 13, 6], [18, 9, 0], [34, 41, 48], [36, 45, 54, 63]], [[21], [12], [17], [10], [33], [42], [37], [44]]], [[[36, 44, 52, 60], [20, 12, 4], [29, 30, 31], [27, 26, 25, 24]], [[21, 14, 7], [19, 10, 1], [35, 42, 49, 56], [37, 46, 55]], [[22], [13], [18], [11], [34], [43], [38], [45]]], [[[37, 45, 53, 61], [21, 13, 5], [30, 31], [28, 27, 26, 25, 24]], [[22, 15], [20, 11, 2], [36, 43, 50, 57], [38, 47]], [[23], [14], [19], [12], [35], [44], [39], [46]]], [[[38, 46, 54, 62], [22, 14, 6], [31], [29, 28, 27, 26, 25, 24]], [[23], [21, 12, 3], [37, 44, 51, 58], [39]], [[15], [20], [13], [36], [45], [47]]], [[[39, 47, 55, 63], [23, 15, 7], [], [30, 29, 28, 27, 26, 25, 24]], [[], [22, 13, 4], [38, 45, 52, 59], []], [[21], [14], [37], [46]]], [[[40, 48, 56], [24, 16, 8, 0], [33, 34, 35, 36, 37, 38, 39], []], [[25, 18, 11, 4], [], [], [41, 50, 59]], [[26], [17], [42], [49]]], [[[41, 49, 57], [25, 17, 9, 1], [34, 35, 36, 37, 38, 39], [32]], [[26, 19, 12, 5], [24], [40], [42, 51, 60]], [[27], [18], [16], [48], [43], [50]]], [[[42, 50, 58], [26, 18, 10, 2], [35, 36, 37, 38, 39], [33, 32]], [[27, 20, 13, 6], [25, 16], [41, 48], [43, 52, 61]], [[28], [19], [24], [17], [40], [49], [44], [51]]], [[[43, 51, 59], [27, 19, 11, 3], [36, 37, 38, 39], [34, 33, 32]], [[28, 21, 14, 7], [26, 17, 8], [42, 49, 56], [44, 53, 62]], [[29], [20], [25], [18], [41], [50], [45], [52]]], [[[44, 52, 60], [28, 20, 12, 4], [37, 38, 39], [35, 34, 33, 32]], [[29, 22, 15], [27, 18, 9, 0], [43, 50, 57], [45, 54, 63]], [[30], [21], [26], [19], [42], [51], [46], [53]]], [[[45, 53, 61], [29, 21, 13, 5], [38, 39], [36, 35, 34, 33, 32]], [[30, 23], [28, 19, 10, 1], [44, 51, 58], [46, 55]], [[31], [22], [27], [20], [43], [52], [47], [54]]], [[[46, 54, 62], [30, 22, 14, 6], [39], [37, 36, 35, 34, 33, 32]], [[31], [29, 20, 11, 2], [45, 52, 59], [47]], [[23], [28], [21], [44], [53], [55]]], [[[47, 55, 63], [31, 23, 15, 7], [], [38, 37, 36, 35, 34, 33, 32]], [[], [30, 21, 12, 3], [46, 53, 60], []], [[29], [22], [45], [54]]], [[[48, 56], [32, 24, 16, 8, 0], [41, 42, 43, 44, 45, 46, 47], []], [[33, 26, 19, 12, 5], [], [], [49, 58]], [[34], [25], [50], [57]]], [[[49, 57], [33, 25, 17, 9, 1], [42, 43, 44, 45, 46, 47], [40]], [[34, 27, 20, 13, 6], [32], [48], [50, 59]], [[35], [26], [24], [56], [51], [58]]], [[[50, 58], [34, 26, 18, 10, 2], [43, 44, 45, 46, 47], [41, 40]], [[35, 28, 21, 14, 7], [33, 24], [49, 56], [51, 60]], [[36], [27], [32], [25], [48], [57], [52], [59]]], [[[51, 59], [35, 27, 19, 11, 3], [44, 45, 46, 47], [42, 41, 40]], [[36, 29, 22, 15], [34, 25, 16], [50, 57], [52, 61]], [[37], [28], [33], [26], [49], [58], [53], [60]]], [[[52, 60], [36, 28, 20, 12, 4], [45, 46, 47], [43, 42, 41, 40]], [[37, 30, 23], [35, 26, 17, 8], [51, 58], [53, 62]], [[38], [29], [34], [27], [50], [59], [54], [61]]], [[[53, 61], [37, 29, 21, 13, 5], [46, 47], [44, 43, 42, 41, 40]], [[38, 31], [36, 27, 18, 9, 0], [52, 59], [54, 63]], [[39], [30], [35], [28], [51], [60], [55], [62]]], [[[54, 62], [38, 30, 22, 14, 6], [47], [45, 44, 43, 42, 41, 40]], [[39], [37, 28, 19, 10, 1], [53, 60], [55]], [[31], [36], [29], [52], [61], [63]]], [[[55, 63], [39, 31, 23, 15, 7], [], [46, 45, 44, 43, 42, 41, 40]], [[], [38, 29, 20, 11, 2], [54, 61], []], [[37], [30], [53], [62]]], [[[56], [40, 32, 24, 16, 8, 0], [49, 50, 51, 52, 53, 54, 55], []], [[41, 34, 27, 20, 13, 6], [], [], [57]], [[42], [33], [58]]], [[[57], [41, 33, 25, 17, 9, 1], [50, 51, 52, 53, 54, 55], [48]], [[42, 35, 28, 21, 14, 7], [40], [56], [58]], [[43], [34], [32], [59]]], [[[58], [42, 34, 26, 18, 10, 2], [51, 52, 53, 54, 55], [49, 48]], [[43, 36, 29, 22, 15], [41, 32], [57], [59]], [[44], [35], [40], [33], [56], [60]]], [[[59], [43, 35, 27, 19, 11, 3], [52, 53, 54, 55], [50, 49, 48]], [[44, 37, 30, 23], [42, 33, 24], [58], [60]], [[45], [36], [41], [34], [57], [61]]], [[[60], [44, 36, 28, 20, 12, 4], [53, 54, 55], [51, 50, 49, 48]], [[45, 38, 31], [43, 34, 25, 16], [59], [61]], [[46], [37], [42], [35], [58], [62]]], [[[61], [45, 37, 29, 21, 13, 5], [54, 55], [52, 51, 50, 49, 48]], [[46, 39], [44, 35, 26, 17, 8], [60], [62]], [[47], [38], [43], [36], [59], [63]]], [[[62], [46, 38, 30, 22, 14, 6], [55], [53, 52, 51, 50, 49, 48]], [[47], [45, 36, 27, 18, 9, 0], [61], [63]], [[39], [44], [37], [60]]], [[[63], [47, 39, 31, 23, 15, 7], [], [54, 53, 52, 51, 50, 49, 48]], [[], [46, 37, 28, 19, 10, 1], [62], []], [[45], [38], [61]]], [[[], [48, 40, 32, 24, 16, 8, 0], [57, 58, 59, 60, 61, 62, 63], []], [[49, 42, 35, 28, 21, 14, 7], [], [], []], [[50], [41]]], [[[], [49, 41, 33, 25, 17, 9, 1], [58, 59, 60, 61, 62, 63], [56]], [[50, 43, 36, 29, 22, 15], [48], [], []], [[51], [42], [40]]], [[[], [50, 42, 34, 26, 18, 10, 2], [59, 60, 61, 62, 63], [57, 56]], [[51, 44, 37, 30, 23], [49, 40], [], []], [[52], [43], [48], [41]]], [[[], [51, 43, 35, 27, 19, 11, 3], [60, 61, 62, 63], [58, 57, 56]], [[52, 45, 38, 31], [50, 41, 32], [], []], [[53], [44], [49], [42]]], [[[], [52, 44, 36, 28, 20, 12, 4], [61, 62, 63], [59, 58, 57, 56]], [[53, 46, 39], [51, 42, 33, 24], [], []], [[54], [45], [50], [43]]], [[[], [53, 45, 37, 29, 21, 13, 5], [62, 63], [60, 59, 58, 57, 56]], [[54, 47], [52, 43, 34, 25, 16], [], []], [[55], [46], [51], [44]]], [[[], [54, 46, 38, 30, 22, 14, 6], [63], [61, 60, 59, 58, 57, 56]], [[55], [53, 44, 35, 26, 17, 8], [], []], [[47], [52], [45]]], [[[], [55, 47, 39, 31, 23, 15, 7], [], [62, 61, 60, 59, 58, 57, 56]], [[], [54, 45, 36, 27, 18, 9, 0], [], []], [[53], [46]]]]

const rookpos = 0
const bishoppos = 1
const knightpos = 2

/*
Pieces will be stored as follows:

0 - 9:  pieces of the color to move
10 - 19: pieces of opposing color

Color can be attained by dividing the piece's number by 8 and the piece type can be attained by checking the piece's number modulo 8.

0: Empty (used for team determination.
1: Rook
2: Bishop
3: Knight
4: Queen
5: King
6: Pawn

past here these are no longer pieces. An en passant square is located on the board but the rest of the 'pieces' are only located after the board, in positions beyond the board.

7: en passant square, an en passant square of the opposing side is removed at the end of the turn.

8: ablitity to castle kingside (0 if not possible)
9: ability to castle queenside (0 if not possible)


Boards are formatted as such:

Positions 0-63 represent the board and its physical pieces.
Position  64 represents the team to move. It is 0 if it is white's turn and 8 if it is black's turn.
Positions 65-68 represent the ability to castle. 65 and 67 are for kingside castling and 66 and 68 are for queenside castling.
Position 69 is used for the halfmove counter, which starts at 20 and counts up to a maximum of 119. 
*/

const enpassantpiece = 7

const teamsquare = 64

const kingsidesquare1 = 65
const kingsidesquare2 = 67
const queensidesquare1 = 66
const queensidesquare2 = 68

const halfmovesquare = 69

local invertcolorarray = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 1, 2, 3, 4, 5, 6, 0, 8, 9, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]



//function fentoboard

function invertcolor(a) { return invertcolorarray[a]; } // inverts the color of a piece mod 8, though this can be adjusted to any even number. maybe this isn't necessary but it's helpful nontheless.

function invertboardcolor(boardin) { //inverts the color of a whole board
	boardin.apply(invertcolor);
	return boardin;
} 

// move function, to move a piece from position a to position b in board c

function movepiece(a,b,c) {
	c.remove(b)
	c.insert(b,c[a])
	c.remove(a)
	c.insert(a,0)
	return c;
}

/*
I will definitely need 2 movegen functions, one for check and one for regular play.
It may be prudent to additionally have a second movegen for quiescence search, but that's up to later determination. 
*/


function movegen(boardin) {
	
	local captures = []
	local noncaptures = []
	
	local getpieceaction = [ // returns 0 for an empty square, 1 for collision with friendly piece,  and 2 for a capture
		function(startsquare,destsquare) { // code for an empty square
			noncaptures.append(movepiece(startsquare,endsquare,boardin))
			return 0;
		},
		function(startsquare,destsquare) { //code for a friendly rook
			return 1;
		},
		function(startsquare,destsquare) { //code for a friendly bishop
			return 1;
		},
		function(startsquare,destsquare) { //code for a friendly knight
			return 1;
		},
		function(startsquare,destsquare) { //code for a friendly queen
			return 1;
		},
		function(startsquare,destsquare) { //code for a friendly king
			return 1;
		},
		function(startsquare,destsquare) { //code for a friendly pawn
			return 1;
		},
		function(startsquare,destsquare) { // code for a friendly en passant square. really you should never be in this position but who knows
			noncaptures.append(movepiece(startsquare,endsquare,boardin))
			return 0;
		},
		function(startsquare,destsquare) { //this shouldn't be a reachable state
			error("Err: piece collided with castling status indicator")
		},
		function(startsquare,destsquare) { //this shouldn't be a reachable state
			error("Err: piece collided with castling status indicator")
		},
		function(startsquare,destsquare) { // code for an empty square of opposite color
			noncaptures.append(movepiece(startsquare,endsquare,boardin))
			return 0;
		},
		function(startsquare,destsquare) { //code for an enemy rook
			captures.append(movepiece(startsquare,endsquare,boardin))
			return 2;
		},
		function(startsquare,destsquare) { //code for an enemy bishop
			captures.append(movepiece(startsquare,endsquare,boardin))
			return 2;
		},
		function(startsquare,destsquare) { //code for an enemy knight
			captures.append(movepiece(startsquare,endsquare,boardin))
			return 2;
		},
		function(startsquare,destsquare) { //code for an enemy queen
			captures.append(movepiece(startsquare,endsquare,boardin))
			return 2;
		},
		function(startsquare,destsquare) { //code for an enemy king, not allowed to capture this
			return 1;
		},
		function(startsquare,destsquare) { //code for an enemy pawn
			captures.append(movepiece(startsquare,endsquare,boardin))
			return 2;
		},
		function(startsquare,destsquare) { //code for an enemy en passant square
			captures.append(movepiece(startsquare,endsquare,boardin))
			boardin.remove(movegenlookup[startsquare][rookpos][1][0])
			boardin.insert(movegenlookup[startsquare][rookpos][1][0],0)
			return 2
		}
	]
		
	local getmoves = [
		120, // Empty Square, no moves are needed
		function(startsquare) { //Rook movegen
			for(local dirnum = 0;dirnum < 4; dirnum++) {
				foreach(valinsquare in movegenlookup[startsquare][rookpos][dirnum]){
					if(getpieceaction[boardin[valinsquare]](startsquare,boardin[valinsquare]) > 0) { break }
				}
			}
		},	
		function(startsquare) { //bishop movegen
			for(local dirnum = 0;dirnum < 4; dirnum++) {
				foreach(valinsquare in movegenlookup[startsquare][bishoppos][dirnum]){
					if(getpieceaction[boardin[valinsquare]](startsquare,boardin[valinsquare]) > 0) { break }
				}
			}
		},
		function(startsquare) { //knight movegen
			for(local dirnum = 0;dirnum < 9; dirnum++) {
				foreach(valinsquare in movegenlookup[startsquare][knightpos][dirnum]){
					if(getpieceaction[boardin[valinsquare]](startsquare,boardin[valinsquare]) > 0) { break }
				}
			}
		},
		function(startsquare) { //queen movegen
			for(local dirnum = 0;dirnum < 4; dirnum++) {
				foreach(valinsquare in movegenlookup[startsquare][bishoppos][dirnum]){
					if(getpieceaction[boardin[valinsquare]](startsquare,boardin[valinsquare]) > 0) { break }
				}
			}
			for(local dirnum = 0;dirnum < 4; dirnum++) {
				foreach(valinsquare in movegenlookup[startsquare][rookpos][dirnum]){
					if(getpieceaction[boardin[valinsquare]](startsquare,boardin[valinsquare]) > 0) { break }
				}
			}
		},
		function(startsquare) { //king movegen
			for(local dirnum = 0;dirnum < 4; dirnum++) {
				local kingposition = movegenlookup[startsquare][rookpos][dirnum][1]
				getpieceaction[boardin[kingposition]](startsquare,boardin[kingposition])
			}
			for(local dirnum = 0;dirnum < 4; dirnum++) {
				local kingposition = movegenlookup[startsquare][bishoppos][dirnum][1]
				getpieceaction[boardin[kingposition]](startsquare,boardin[kingposition])
			}
		},
		function(startsquare) { //pawn movegen
			for(local dirnum = 2;dirnum < 4; dirnum++) {
				local pawnposition = movegenlookup[startsquare][bishoppos][dirnum][1]
				if(getpieceaction[boardin[pawnposition]](startsquare,boardin[pawnposition]) == 0) {
					noncaptures.pop()
				}
			}
			local pawnpositions = movegenlookup[startsquare][rookpos][0]
			
			local result = getpieceaction[boardin[pawnpositions[0]]](startsquare,boardin[pawnpostions[0]])
			if(result == 2) { captures.pop() }
			else if(result == 0 && startpos-(startpos%8) == 8) {
				local secondresult = getpieceaction[boardin[pawnpositions[1]]]
				if(secondresult  == 2){ captures.pop() }
				if(secondresult == 0) {
					local tomod = noncaptures.pop();
					tomod.remove(pawnpositions[0]);
					tomod.insert(pawnpositions[0],enpassantpiece);
				}
			}
			
		},
		120, // en passant square
		120, // castling
		120, // other castling
		120, // enemy 1
		120, // enemy 2
		120, // enemy 3
		120, // enemy 4
		120, // enemy 5
		120, // enemy 6
		120, // enemy 7
		120  // enemy 8
	]
	
	
	for(local square=0;square<64;square++) { // this is the main loop, I may change this if I choose instead to use a piece list instead of a square list so I don't have to waste time
		getmoves[boardin[square]](square);
	}
	
	
}


local a = [2,3,4]
#a = movepiece(1,2,a)
a.extend([5,6,7,8])
foreach(b in a) {
	print(b)
	print("\n")
}

print("\n");
